IMPORTS{
import main.GlobalVar;
import main.JSON_cleaner_creator;
import main.LarvaServer;
import main.RosBridgeClient;
import main.WebSocketClientHandler;
import main.checkCommand;
import org.java_websocket.client.WebSocketClient;
}

GLOBAL {
	
	EVENTS{
		get_change_data() = {*.get_change_data()}
		
		valid_command() = {*.larva_check_valid_action1()}
		invalid_command() = {*.larva_check_valid_action2()}
		
		send_move_on(String message )= {*.broadcast(message)}
		send_command(String message)= {*.send(message)}
		
		check_nav(double distance, double x, double y, double w)= {*.check_vert_ang(distance, x, y, w)}
		check_speed(double change_speed)= {*.check_speed(change_speed)}
		check_vert_ang(double change_ang)= {*.check_vert_ang(change_ang)}
						
	}
	
			PROPERTY Navigation{
		STATES{

            NORMAL{
            	checkValid
            	commandValid
            	commandInvalid
                sendExecToROS
                sendMoveToNextCommand
            }
            STARTING{
                getDistAndCommand
            }
		}
		
		TRANSITIONS{
			getDistAndCommand->checkValid
        		[check_nav
        		\
        		\System.out.println("Checking the new navigation command data and obsticle distance!");
            	]
            	
            checkValid->commandValid
        		[valid_command
        		\
        		\System.out.println("Valid, send navigation command to the ROS System"); 
            	]
	            	
            commandValid->sendExecToROS 
            	[send_command
            	\
            	\System.out.println("Sent navigation command to ROS");
            	]
            	
           	sendExecToROS->sendMoveToNextCommand 
            	[send_move_on
            	\
            	\System.out.println("Sent send move on to the Control System");
            	]
            	
            	checkValid->commandInvalid
        		[invalid_command
        		\
        		\System.out.println("Invalid, send move on to the Control System"); 
            	]
			}
	}
	
		PROPERTY Speed{
		STATES{

            NORMAL{
            	checkValid
            	commandValid
            	commandInvalid
                sendExecToROS
                sendMoveToNextCommand
            }
            STARTING{
                getCommand
            }
		}
		
		TRANSITIONS{
			getCommand->checkValid
        		[check_speed
        		\
        		\System.out.println("Checking the new speed command data!");
            	]
            	
            checkValid->commandValid
        		[valid_command
        		\
        		\System.out.println("Valid, send speed command to the ROS System"); 
            	]
	            	
            commandValid->sendExecToROS 
            	[send_command
            	\
            	\System.out.println("Sent speed command to ROS");
            	]
            	
           	sendExecToROS->sendMoveToNextCommand 
            	[send_move_on
            	\
            	\System.out.println("Sent send move on to the Control System");
            	]
            	
            	checkValid->commandInvalid
        		[invalid_command
        		\
        		\System.out.println("Invalid, send move on to the Control System"); 
            	]
			}
	}
	
	PROPERTY Mast_Angle{
		STATES{

            NORMAL{
            	checkValid
            	commandValid
            	commandInvalid
                sendExecToROS
                sendMoveToNextCommand
            }
            STARTING{
                getCommand
            }
		}
		
		TRANSITIONS{
			getCommand->checkValid
        		[check_vert_ang
        		\
        		\System.out.println("Checking the new Mast command data!");
            	]
            	
            checkValid->commandValid
        		[valid_command
        		\
        		\System.out.println("Valid, send Mast command to the ROS System"); 
            	]
	            	
            commandValid->sendExecToROS 
            	[send_command
            	\
            	\System.out.println("Sent Mast command to ROS");
            	]
            	
           	sendExecToROS->sendMoveToNextCommand 
            	[send_move_on
            	\
            	\System.out.println("Sent send move on to the Control System");
            	]
            	
            	checkValid->commandInvalid
        		[invalid_command
        		\
        		\System.out.println("Invalid, send move on to the Control System"); 
            	]
			}
	}
	
 }